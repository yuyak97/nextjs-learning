generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
}

model User {
  id                     String          @id @default(uuid())
  name                   String
  email                  String?         @unique
  emailVerified          DateTime?       @map("email_verified")
  image                  String?
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @default(now()) @updatedAt @map("updated_at")
  accounts               Account[]
  sessions               Session[]
  userProperty           UserProperty?
  gamingHistoryCreatedBy GamingHistory[] @relation("gamingHistoryCreatedBy")
  gamingHistoryUpdatedBy GamingHistory[] @relation("gamingHistoryUpdatedBy")
  gamingHistories        GamingHistory[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_requests")
}

model UserProperty {
  id        Int      @id @default(autoincrement())
  username  String?  @map("username")
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  userId    String   @unique() @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_properties")
}

model GamingHistory {
  id          Int       @id @default(autoincrement())
  publicId    String?   @map("public_id")
  title       String    // Game title
  image       String?
  slug        String    // slug from RAWG API    
  description String    @db.Text()
  startMonth  DateTime  @map("start_month")
  endMonth    DateTime? @map("end_month")
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  createdById String    @map("created_by")
  updatedById String    @map("updated_by")

  createdBy User @relation("gamingHistoryCreatedBy", fields: [createdById], references: [id])
  updatedBy User @relation("gamingHistoryUpdatedBy", fields: [updatedById], references: [id])
  user      User @relation(fields: [userId], references: [id])

  @@map("gaming_history")
}
